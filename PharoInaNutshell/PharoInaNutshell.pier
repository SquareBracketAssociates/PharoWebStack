!Pharo Web Stack


!!The Stack

Pharo is a simple language that is really powerful to model complex domains and applications. In addition, different frameworks are available at different levels to empower the development. 

- Model level. Magritte (a metamodeling framework) provides a way to describe objects and offers a set of interpreters that take advantage of these descriptions. For example, Seaside-Magritte offers automatic form creation and other behavior of Seaside components. Voyage, a framework that supports noSql databases such as MongoDB, also uses Magritte.

- Web level. Pharo is particularly well positioned at the web level. Several frameworks exists and have been used in production since several years. First, Seaside *http://www.seaside.st* is a server-side solution. It uses Zinc to serve HTML and Javascript. Seaside offers JQuery supports (Read the chapter *http://book.seaside.st*). The library Twitter bootstrap *http://getbootstrap.com/* is supported by Seaside and this is the one we will use in this book. Reef is also an extension of Seaside: it provides components embedding Javascript and let you decide client or server side queries and actions. Recently a new framework appeared: Tide. Tide is the equivalent to Seaside but defined in Amber *http://amber-lang.net/*, therefore in the client side. Tide sends JSON serialized objects with meta-descriptions of actions.

- Network level. At the lowest level, Zinc is the HTTP client server used by default in Pharo (there is chapter about Zinc in the Pharo for the entreprise book  *http://*). Zinc is continuously improved by its author: Sven Van Caekenberghe. Zodiac is the HTTPS counterpart of Zinc. In addition, there is support for Oauth and WebSockets. Zinc also provides facilities to develop REST applications. 

- Persistency level. There are several databases supporting from OORM to noSQL ones. In this book we will focus on the noSQL one such as MongoDB. Other frameworks such GLORP or DBXTalk support relational databases.

- Data types level. There are several frameworks to read and emit various formats such as JSON using NeoJSON *http://stfx.eu/neojson/*, comma-separated values (CSV) using NeoCVS *http://github.com/svenvc/NeoCVS*, XML (XMLWriter/XMLReader) or the Smalltalk Object Notation (STON) *https://github.com/svenvc/ston*.


!! Pharo in a nutshell
Pharo is a cool dynamic pure object-oriented language. Its syntax fits in one post-card and its object model is simple. If you want to know more have a look at some chapters of the Pharo by Example book freely available at: *http://www.pharobyexample.org*

!!!Syntax

Pharo's syntax is minimal. Essentially, there is syntactic constructs only for ''sending messages'' (i.e., expressions). Expressions are built up from a very small number of  primitive elements. There are only 6 keywords, and there is no syntax for control structures or declaring new classes. Instead, nearly everything is achieved by sending messages to objects. For instance, instead of an if-then-else control structure, Pharo sends messages like ==ifTrue:== to ==Boolean== objects. New subclasses are created by sending a message to their superclass.

The following table shows how some Java common patterns are expressed in Pharo.

| ''Java'' | ''Pharo'' |
| ==int cadence== | ==| cadence |== |
| ==cadence = cadence + 1 ;== | cadence := cadence + 1. |
| ==foo.bar();== |  ==foo bar.== | 
| ==foo.bar(baz);== | ==foo bar: baz.==|
| ==foo.bar(baz, quux);== | ==foo bar: baz with: quux.== |
| ==Point p = new Point();== | ==p := Point new.==|
| ==return foo;== | ==^ foo==|
| ==this== | ==self== |
| ==super== | ==super== |
| =="String"== | =='String'==| 
| ==String.intern(”symbol”);== | ==#symbol==|

In addition to messages, Pharo defines lambda expressions using ==[ ]==. Lambdas, called blocks, gets executed sending the messages ==value==,  ==value:== and other to them as shown below. 

[[[
[ | 1 + 2 ] value
   --> 3

[ :x | 1 + x ] value: 2 
	--> 3

[ :x :y | x + y ] value: 1 value: 2 
--> 3	
]]]


!!! Pharo object model


Pharo's object model is based on a set of simple rules that are applied ''uniformly''. 
The rules are as follows:

- Everything is an object.

- Every object is an instance of a class.

- Every class has a superclass.

- Everything happens by sending messages.

- Method lookup follows the inheritance chain.

- Methods are public.

- Instance variables are protected. 

There is no constructors, static methods, primitive types, generics, type declaration.


!! How to get Pharo?

There are multiple ways to get Pharo: you can use 

- platform specific installers 
- the cool Pharo launcher tool
- or plain curl scripts

!!!Platform specific installers

You can find platform specific installers at: 

	http://www.pharo-project.org/pharo-download 


!!! Pharo Launcher
There is also the excellent tool named Pharo launcher that lets you fetch existing images available at various locations such as the continuous integration of Pharo contributions, or the recent pharo version and launch the pharo bundles you got already on your disc. 


!!! Scripts
Go to http://get.pharo.org and pick up a script

[[[
curl get.pharo.org/stable | bash 
]]]
or if curl is not available: 

[[[
wget -O- get.pharo.org/stable | bash
]]]

DeepIntoPharo *http://www.deepintopharo.org* contains a chapter on Pharo installer and scripts

!! Community and Finding Information
The pharo community uses essentially mailing-lists	

!!!Forges

- *http://www.smalltalkHub.com* is the new forge developed by Nicolas Petton and using Amber and Pharo.

- There are also the gemtalk squeaksource repository *http://seaside.gemtalksystems.com/ss/ss.html*
- *http://www.squeaksource.com* is the old forge containing squeak and pharo projects.
- In addition for really old projects you can have a look at SqueakMap *http://map.squeak.org/*

Several books exist and are freely available:
- Pharo by Example *http://pharobyExample.org*
- Deep into Pharo *http://deepintopharo.org*
- Seaside *http://book.seaside.st*
- Pharo for the enterprise (Working name) is available at *https://ci.inria.fr/pharo-contribution/job/PharoForTheEnterprise/lastSuccessfulBuild/artifact/*

Several blogs exist:
- There is a blog aggregator named Squeak planet ** and Smalltalk planet
- *http://pharoweekly.wordpress.org* is a blog synthesing the activities of the Pharo mailing-list.
- *http://astares.blogspot.com* written by Torsten Bergman provides many information about Pharo and Smalltalk.
- *http://clementbera.wordpress.com* Cl\'ement Bera is working on the new generation virtual machines with Eliot Miranda and his blog focuses on VM aspects.


Mailing-lists: There are three mailing-lists
-
-

	
!! Conclusion

% Local Variables:
% eval: (flyspell-mode -1)
% End:
